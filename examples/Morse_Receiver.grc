options:
  parameters:
    author: henningM1r
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: gr_Morse_Receiver
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: gr_Morse_Receiver
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [9, 9]
    rotation: 0
    state: enabled

blocks:
- name: band_freq
  id: variable
  parameters:
    comment: ''
    value: '7000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 116.0]
    rotation: 0
    state: true
- name: check_box_print_0duration
  id: variable_qtgui_msgcheckbox
  parameters:
    cellalignment: '1'
    comment: 'enable printing the duration

      of OFF signal in the console

      of GNURadio Companion'
    gui_hint: (22,2)
    initPressed: 'False'
    label: Print durations of OFF
    outputmsgname: value
    pressed: 'True'
    released: 'False'
    type: bool
    value: 'False'
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1832, 796.0]
    rotation: 0
    state: true
- name: checkbox_print_1duration
  id: variable_qtgui_msgcheckbox
  parameters:
    cellalignment: '1'
    comment: 'enable printing the duration

      of ON signal in the console

      of GNURadio Companion'
    gui_hint: (22,1)
    initPressed: 'False'
    label: Print durations of ON
    outputmsgname: value
    pressed: 'True'
    released: 'False'
    type: bool
    value: 'False'
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1832, 556.0]
    rotation: 0
    state: true
- name: checkbox_print_symbols
  id: variable_qtgui_msgcheckbox
  parameters:
    cellalignment: '1'
    comment: 'enable printing received

      symbols in the console

      of GNURadio Companion'
    gui_hint: (22,0)
    initPressed: 'False'
    label: Print Symbols
    outputmsgname: value
    pressed: 'True'
    released: 'False'
    type: bool
    value: 'False'
    verticalalignment: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1832, 324.0]
    rotation: 0
    state: true
- name: element_space
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (19,0,1,3)
    label: element_space
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '80'
    step: '1'
    stop: '700'
    value: '270'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 588.0]
    rotation: 0
    state: enabled
- name: freq_morse
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (3,0,1,3)
    label: Frequency
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '100000'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1216, 4.0]
    rotation: 0
    state: enabled
- name: freq_shift_corr
  id: variable
  parameters:
    comment: 'to match signals found

      in spectrum analysers'
    value: '-602.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 12.0]
    rotation: 0
    state: true
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: signal gain
    gui_hint: (4,0,1,3)
    label: Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '25'
    step: '1'
    stop: '1000'
    value: '450'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 4.0]
    rotation: 0
    state: enabled
- name: hi_thres
  id: variable_qtgui_range
  parameters:
    comment: thresholder high
    gui_hint: (10,0,1,3)
    label: high_thres
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.01'
    step: '0.1'
    stop: '20'
    value: '1'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 4.0]
    rotation: 0
    state: enabled
- name: label1
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: (23, 0)
    label: 'Note: Please view detected Morse symbols in gr-companion console (set
      -print symbols- checked)'
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 724.0]
    rotation: 0
    state: true
- name: label2
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: (24, 0)
    label: 'Note: Please run DecodeMorse.py in a terminal to view decoded Morse symbols
      as ASCII symbols'
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 812.0]
    rotation: 0
    state: true
- name: label3
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: (2,0,1,3)
    label: 'CW-bands: 7000000, 14000000, 18068000, 21000000'
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 140.0]
    rotation: 0
    state: true
- name: letter_space
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (20,0,1,3)
    label: letter_space
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '200'
    step: '1'
    stop: '1600'
    value: 270*3
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1480, 588.0]
    rotation: 0
    state: enabled
- name: lo_thres
  id: variable_qtgui_range
  parameters:
    comment: thresholder low
    gui_hint: (11,0,1,3)
    label: low_thres
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.01'
    step: '0.01'
    stop: '10'
    value: '0.07'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1456, 4.0]
    rotation: 0
    state: enabled
- name: long_mark
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (18,0,1,3)
    label: long_mark
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '200'
    step: '1'
    stop: '1600'
    value: 270*3
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1480, 460.0]
    rotation: 0
    state: enabled
- name: loudness
  id: variable_qtgui_range
  parameters:
    comment: 'avoid listening to

      loud clipped signals'
    gui_hint: (0,0,1,3)
    label: loudness
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.01'
    step: '0.01'
    stop: '1'
    value: '0.1'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 12.0]
    rotation: 0
    state: enabled
- name: print_0duration
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1856, 732.0]
    rotation: 0
    state: true
- name: print_1duration
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1856, 492.0]
    rotation: 0
    state: true
- name: print_symbols
  id: variable
  parameters:
    comment: ''
    value: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1856, 260.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '192000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12.0]
    rotation: 0
    state: enabled
- name: short_mark
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (17,0,1,3)
    label: short_mark
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '80'
    step: '1'
    stop: '700'
    value: '270'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 460.0]
    rotation: 0
    state: enabled
- name: tolerance
  id: variable_qtgui_range
  parameters:
    comment: duration tolerance range
    gui_hint: (15,0,1,3)
    label: tolerance
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '50'
    step: '1'
    stop: '200'
    value: '100'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600, 4.0]
    rotation: 0
    state: enabled
- name: word_space
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (21,0,1,3)
    label: word_space
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '800'
    step: '1'
    stop: '8000'
    value: 270*7
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600, 588.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: hi_thres
    comment: 'high threshold line

      in time plot'
    freq: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_CONST_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 1308.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: lo_thres
    comment: 'low threshold line

      in time plot'
    freq: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: float
    waveform: analog.GR_CONST_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 1468.0]
    rotation: 0
    state: true
- name: analog_simple_squelch_cc_0_0
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '1'
    comment: 'filter out very low noise

      below given threshold'
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: '-110'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 540.0]
    rotation: 0
    state: enabled
- name: audio_sink_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: 'listening live to received

      Morse tones'
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: '24000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 788.0]
    rotation: 0
    state: enabled
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: 'avery dense filter

      to pick up just one

      Morse signal'
    decim: '8'
    gain: '15'
    high_cutoff_freq: '805'
    interp: '1'
    low_cutoff_freq: '400'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: '400'
    win: window.WIN_BLACKMAN
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 492.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 888.0]
    rotation: 0
    state: true
- name: blocks_complex_to_real_0
  id: blocks_complex_to_real
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 792.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: write to variable
    target: print_symbols
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2096, 364.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: write to variable
    target: print_1duration
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2104, 596.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: write to variable
    target: print_0duration
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2104, 836.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0_1
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: write to variable
    target: band_freq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 52.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_0
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: 'Scale signal according

      to gain slider'
    const: gain
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 548.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_0_0
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: loudness
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 788.0]
    rotation: 0
    state: enabled
- name: blocks_threshold_ff_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: 'Decide whether

      the received signal

      is on or off'
    high: hi_thres
    init: '0'
    low: lo_thres
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 1108.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\n\nclass blk(gr.sync_block):\n\n    def __init__(self,\
      \ threshold=0.0, mode=0, coeff=0.15):\n        gr.sync_block.__init__(\n   \
      \         self,\n            name='Envelope Detector',\n            in_sig=[np.float32],\n\
      \            out_sig=[np.float32]\n        )\n        self.ry = 0\n        self.threshold\
      \ = threshold\n        self.mode = mode\n        self.coeff = coeff\n\n\n  \
      \  def work(self, input_items, output_items):\n        output_items[0][:] =\
      \ input_items[0]\n\n        buf = [0] * len(input_items[0])\n        a0 = self.coeff\n\
      \        b1 = 1 - a0\n\n        for i in range(0, len(input_items[0])):\n  \
      \          if self.mode == 1:\n                buf[i] = abs(input_items[0][i])\n\
      \            else:\n                if input_items[0][i] > self.threshold:\n\
      \                    buf[i] = input_items[0][i]\n                else:\n   \
      \                 buf[i] = 0\n\n        for i in range(0, len(input_items[0])):\n\
      \            if i == 0:\n                output_items[0][i] = a0*buf[i] + b1*self.ry\n\
      \            else: # i >= 1 \n                output_items[0][i] = a0*buf[i]\
      \ + b1*output_items[0][i-1]\n\n        i = len(output_items[0]) - 1\n      \
      \  self.ry = output_items[0][i]\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    coeff: '0.2'
    comment: 'smooth signal with

      an envelope detector'
    maxoutbuf: '0'
    minoutbuf: '0'
    mode: '0'
    threshold: '0.0'
  states:
    _io_cache: ('Envelope Detector', 'blk', [('threshold', '0.0'), ('mode', '0'),
      ('coeff', '0.15')], [('0', 'float', 1)], [('0', 'float', 1)], '', ['coeff',
      'mode', 'threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 868.0]
    rotation: 0
    state: true
- name: epy_block_0_0_0
  id: epy_block
  parameters:
    ASCII_pause: long_mark
    OOK_pause: short_mark
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\n\n# counts number of ones of current\
      \ status\n_num_ones  = 0\n\n# counts number of zeros of current status\n_num_zeros\
      \ = 0\n\n# stores current on/off status\n_sync = -1\n\n\nclass blk(gr.sync_block):\n\
      \n    def __init__(self, OOK_pause=270, ASCII_pause=825, short_sym=280, long_sym=870,\
      \ break_pause=1200, tolerance=40, print_symbols=True, print_1duration=False,\
      \ print_0duration=False):\n\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Morse Decoder',\n            in_sig=[np.float32],\n     \
      \       out_sig=[np.float32]\n        )\n        \n        # durations of the\
      \ symbols and pauses\n        self.tolerance   = tolerance\n        self.OOK_pause\
      \   = OOK_pause\n        self.ASCII_pause = ASCII_pause\n        self.short_sym\
      \   = short_sym\n        self.long_sym    = long_sym\n        self.break_pause\
      \ = break_pause\n\n        # verbose output\n        self.print_symbols   =\
      \ print_symbols\n        self.print_1duration = print_1duration\n        self.print_0duration\
      \ = print_0duration\n\n        if self.print_symbols == True:\n            print(\"\
      short mark (.): \", self.short_sym)\n            print(\"long mark (_): \",\
      \ self.long_sym)\n            print(\"element-space (^)\", self.OOK_pause)\n\
      \            print(\"letter-space (~): \", self.ASCII_pause)\n            print(\"\
      word-space (;): \", self.break_pause)\n            print(\"tolerance: \", self.tolerance)\n\
      \            \n\n        # output message\n        self.message_port_register_out(pmt.intern('msg_out'))\n\
      \        \n\n    def work(self, input_items, output_items):\n        global\
      \ _num_zeros\n        global _num_ones\n        global _sync\n\n        inp\
      \ = input_items[0]\n\n        for idx in range(len(inp)):\n            ch =\
      \ inp[idx]\n\n            if ch == 1:\n                _num_ones += 1\n\n  \
      \          else: # ch == 0\n                _num_zeros += 1\n\n            #\
      \ out of sync status\n            if _sync == -1:\n                _num_zeros\
      \ = 0\n                _num_ones = 0\n\n                if ch == 0:\n      \
      \              _sync = 0\n                \n                elif ch == 1:\n\
      \                    _sync = 1\n            \n            # status: currently\
      \ off\n            elif _sync == 0:\n                # status remains identical\n\
      \                if ch == 0:\n                    pass\n                \n \
      \               elif ch == 1:\n                    _sync = 1\n             \
      \       # WARN: this print is very slow, and may cause GNURadio to crash\n \
      \                   if self.print_0duration:\n                        print(f\"\
      #zeros: {_num_zeros}\")\n\n                    # detect OOK pause\n        \
      \            if (_num_zeros >= self.OOK_pause - self.tolerance and\n       \
      \                 _num_zeros <= self.OOK_pause + self.tolerance):\n        \
      \                \n                        if self.print_symbols:\n        \
      \                    #print(f\"^\")\n                            pass\n\n  \
      \                      # marking detected OOK_pause\n                      \
      \  key = pmt.intern(\" \")\n                        value = pmt.intern(\"^\"\
      )\n                        self.add_item_tag(0,\n                          \
      \  self.nitems_written(0) + idx,\n                            key,\n       \
      \                     value\n                        )\n\n                 \
      \   # detect ASCII pause\n                    elif (_num_zeros >= self.ASCII_pause\
      \ - self.tolerance and\n                          _num_zeros <= self.ASCII_pause\
      \ + self.tolerance):\n                        \n                        if self.print_symbols:\n\
      \                            print(\"~\")\n\n                        # for further\
      \ processing outside this block\n                        self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.intern(\" \"))\n\n                        # marking detected\
      \ ASCII pause\n                        key = pmt.intern(\" \")\n           \
      \             value = pmt.intern(\"~\")\n                        self.add_item_tag(0,\n\
      \                            self.nitems_written(0) + idx,\n               \
      \             key,\n                            value\n                    \
      \    )\n\n                    # detect break pause\n                    elif\
      \ (_num_zeros >= self.break_pause - self.tolerance):\n                     \
      \   \n                        if self.print_symbols:\n                     \
      \       print(\";\")\n                            #print(f\"symbol end, break\"\
      )\n                        \n                        # for further processing\
      \ outside this block \n                        self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.intern(\";\"))\n                        \n                 \
      \       # marking detected break pause\n                        key = pmt.intern(\"\
      \ \")\n                        value = pmt.intern(\"\xB0\")\n              \
      \          self.add_item_tag(0,\n                            self.nitems_written(0)\
      \ + idx,\n                            key,\n                            value\n\
      \                        )\n\n                    _num_zeros = 0\n         \
      \   \n            # status: currently on\n            elif _sync == 1:\n   \
      \             # status changes\n                if ch == 0:\n              \
      \      _sync = 0\n                    # WARN: this print is very slow, and may\
      \ cause GNURadio to crash\n                    if self.print_1duration:\n  \
      \                      print(f\"#ones: {_num_ones}\")\n                    \n\
      \                    # detect short symbol\n                    if (_num_ones\
      \ >= self.short_sym - self.tolerance and\n                        _num_ones\
      \ <= self.short_sym + self.tolerance):\n                        \n         \
      \               if self.print_symbols:\n                            print(f\"\
      .\", end=\"\")\n                        \n                        # for further\
      \ processing outside this block\n                        self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.intern(\".\"))\n\n                        # marking detected\
      \ short symbol\n                        key = pmt.intern(\".\")\n          \
      \              value = pmt.intern(\".\")\n                        self.add_item_tag(0,\n\
      \                            self.nitems_written(0) + idx,\n               \
      \             key,\n                            value\n                    \
      \    )\n\n                    # detect long symbol\n                    elif\
      \ (_num_ones >= self.long_sym - self.tolerance and\n                       \
      \   _num_ones <= self.long_sym + self.tolerance):\n                        \n\
      \                        if self.print_symbols:\n                          \
      \  print(f\"_\", end=\"\")\n\n                        # for further processing\
      \ outside this block\n                        self.message_port_pub(pmt.intern(\"\
      msg_out\"), pmt.intern(\"_\"))\n\n                        # marking detected\
      \ long symbol\n                        key = pmt.intern(\"_\")\n           \
      \             value = pmt.intern(\"_\")\n                        self.add_item_tag(0,\n\
      \                            self.nitems_written(0) + idx,\n               \
      \             key,\n                            value\n                    \
      \    )\n\n                    _num_ones = 0\n\n                # status remains\
      \ identical\n                elif ch == 1:\n                    pass\n     \
      \       \n            # reset zeros during longer pauses\n            if _num_zeros\
      \ >= 200000:\n                _sync = -1\n                _num_zeros = 0\n \
      \               _num_ones = 0\n\n            # this should not happen anyway\n\
      \            if _num_ones >= 200000:\n                _sync = -1\n         \
      \       _num_zeros = 0\n                _num_ones = 0\n\n        # simply pass\
      \ through original signal with tags attached\n        output_items[0][:] = input_items[0]\n\
      \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    break_pause: word_space
    comment: 'determines the morse

      symbols ".", "_", and

      symbol/word breaks

      with a certain tolerance'
    long_sym: letter_space
    maxoutbuf: '0'
    minoutbuf: '0'
    print_0duration: print_0duration
    print_1duration: print_1duration
    print_symbols: print_symbols
    short_sym: element_space
    tolerance: tolerance
  states:
    _io_cache: ('Morse Decoder', 'blk', [('OOK_pause', '270'), ('ASCII_pause', '825'),
      ('short_sym', '280'), ('long_sym', '870'), ('break_pause', '1200'), ('tolerance',
      '40'), ('print_symbols', 'True'), ('print_1duration', 'False'), ('print_0duration',
      'False')], [('0', 'float', 1)], [('0', 'float', 1), ('msg_out', 'message', 1)],
      '', ['ASCII_pause', 'OOK_pause', 'break_pause', 'long_sym', 'print_0duration',
      'print_1duration', 'print_symbols', 'short_sym', 'tolerance'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 1060.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import zmq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 84.0]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: 'several (mostly German) websites on Morse code and acronyms


      http://dk3red.homepage.t-online.de/de/s3_02.htm

      http://dk3red.homepage.t-online.de/de/s3.htm

      https://wiki.oevsv.at/wiki/Abk%C3%BCrzungen

      https://www.modellskipper.de/Maritimes/Abkuerzungen_Abschnitt_A/Index

      https://www.qsl.net/dk5ke/abk.html

      https://wiki.edu.vn/wiki18/2021/01/26/abkurzungen-fur-morsecodes-wikipedia/


      https://en.wikipedia.org/wiki/Morse_code_abbreviations'
    note: Morse Abbreviations (German Translation)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2152, 20.0]
    rotation: 0
    state: true
- name: note_1
  id: note
  parameters:
    alias: ''
    comment: "35.7 \u2013 137,8 kHz\n1810 \u2013 1838 kHz\n3500 \u2013 3570 kHz\n\
      7000 \u2013 7040 kHz\n10100 \u2013 10130 kHz\n14000 \u2013 14070 kHz\n18068\
      \ \u2013 18095 kHz\n21000 \u2013 21070 kHz\n24890 \u2013 24915 kHz\n28000 \u2013\
      \ 28070 kHz"
    note: permitted Morse frequencies
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1960, 20.0]
    rotation: 0
    state: true
- name: note_1_1
  id: note
  parameters:
    alias: ''
    comment: "(Wikipedia)\nInternational Morse code is composed of five elements:\u200A\
      \n\n * short mark, dot or dit or ( \u2584 ) or (.): \"dit duration\" is one\
      \ time unit long = 1 tau\n * long mark, dash or dah or ( \u2584\u2584\u2584\
      \ ) or (_): three time units long = 3 tau\n * element-space (^) between the\
      \ marks within a character: one time unit long = 1 tau\n * letter-space: three\
      \ time units long = 3 tau\n * word-space: seven time units long (formerly five)\
      \ = 7 tau"
    note: permitted Morse frequencies
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 276.0]
    rotation: 0
    state: true
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: airspyhf=0
    bb_gain0: '30'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '2000'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: band_freq + freq_morse + freq_shift_corr
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '30'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'True'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '30'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '2'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 452.0]
    rotation: 0
    state: enabled
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: (1,0,1,3)
    is_pair: 'True'
    is_static: 'True'
    key: freq
    label: CW band entry frequency
    maxoutbuf: '0'
    minoutbuf: '0'
    type: int
    value: '7000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 12.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: black
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: 'to view the adjustded

      gain, thresholder and tau'
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (12,0,3,3)
    label1: envelope signal
    label10: Signal 10
    label2: threshold signal
    label3: high threshold
    label4: low threshold
    label5: ''
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '4'
    size: int(samp_rate/8)
    srate: int(samp_rate/32)
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.025'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '6'
    ymin: '-0.1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 1080.0]
    rotation: 0
    state: true
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: '1000'
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: 'helps the user to

      find and adjust

      active Morse

      signals'
    fc: '0'
    fftsize: '512'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: (5,0,5,3)
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: Morse-Waterfall
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.025'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 340.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: 'especially to

      avoid overflows'
    decim: '4'
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 860.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 548.0]
    rotation: 0
    state: true
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 884.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 836.0]
    rotation: 0
    state: true
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 1076.0]
    rotation: 0
    state: true
- name: zeromq_push_msg_sink_1
  id: zeromq_push_msg_sink
  parameters:
    address: tcp://127.0.0.1:55555
    affinity: ''
    alias: ''
    bind: 'True'
    comment: 'provide signal to a ZMQ server

      to futher decode the symbols

      to human-readible ASCII

      symbols and words'
    timeout: '900'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 1244.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', qtgui_time_sink_x_0, '2']
- [analog_sig_source_x_0_0, '0', qtgui_time_sink_x_0, '3']
- [analog_simple_squelch_cc_0_0, '0', blocks_multiply_const_xx_0, '0']
- [band_pass_filter_0, '0', analog_simple_squelch_cc_0_0, '0']
- [blocks_complex_to_mag_squared_0, '0', rational_resampler_xxx_0_0, '0']
- [blocks_complex_to_real_0, '0', blocks_multiply_const_xx_0_0, '0']
- [blocks_multiply_const_xx_0, '0', virtual_sink_0, '0']
- [blocks_multiply_const_xx_0_0, '0', audio_sink_0, '0']
- [blocks_threshold_ff_0, '0', epy_block_0_0_0, '0']
- [check_box_print_0duration, state, blocks_msgpair_to_var_0_0_0, inpair]
- [checkbox_print_1duration, state, blocks_msgpair_to_var_0_0, inpair]
- [checkbox_print_symbols, state, blocks_msgpair_to_var_0, inpair]
- [epy_block_0, '0', virtual_sink_1, '0']
- [epy_block_0_0_0, '0', qtgui_time_sink_x_0, '1']
- [epy_block_0_0_0, msg_out, zeromq_push_msg_sink_1, in]
- [osmosdr_source_0, '0', band_pass_filter_0, '0']
- [osmosdr_source_0, '0', qtgui_waterfall_sink_x_0, '0']
- [qtgui_edit_box_msg_0, msg, blocks_msgpair_to_var_0_1, inpair]
- [rational_resampler_xxx_0_0, '0', epy_block_0, '0']
- [virtual_source_0, '0', blocks_complex_to_mag_squared_0, '0']
- [virtual_source_0, '0', blocks_complex_to_real_0, '0']
- [virtual_source_1, '0', blocks_threshold_ff_0, '0']
- [virtual_source_1, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1
